{"version":3,"sources":["webpack:///./src/generated/doc/fuzuoyonghanshu/index.vue","webpack:///./src/generated/doc/fuzuoyonghanshu/index.vue?0098"],"names":["class","id","script","__exports__","render"],"mappings":"4IACOA,MAAM,iB,EACT,gCAAyB,MAArBC,GAAG,SAAQ,SAAK,G,EACxB,gCAEa,mBADb,gCAA4F,SAAzF,2F,KAEH,gCAGuB,SAHpB,4KAGgB,G,EACnB,gCAAgB,SAAb,aAAS,G,+BACM,iR,mqIAVhB,gCAyRI,MAzRJ,EAyRI,CAxRF,EACJ,EAGA,EAIA,EACA,gCAaoB,YAbf,yBAaS,Q,8BAbI,iBAalB,C,cACA,I,yBCxBA,MAAMC,EAAS,GAGTC,EAA2B,IAAgBD,EAAQ,CAAC,CAAC,SAASE,KAErD","file":"js/chunk-2d0ced9c.bbe264ed.js","sourcesContent":["<template>\n  <div class=\"markdown-body\">\n    <h1 id=\"副作用处理\">副作用处理</h1>\n<blockquote>\n<p>表单副作用，也就是由表单字段的内部事件所产生的联动，校验，异步逻辑，如何更好的管理和维护副作用逻辑，恰好就是rxjs的最大优势，所以，本方案采用了rxjs来管理副作用逻辑</p>\n</blockquote>\n<p>表单的API中包含的effects即为表单的副作用函数，这个effects是一个功能极为强大的回调函数，\n它接收了一个selector函数作为参数，我们可以用selector来选择表单内的任意一个或多个字段，\n对其做状态修改，即便存在异步逻辑，也是可以很方便的在各种异步环境下对字段的状态做修改，\n所以，我们的表单联动，是不限于时空的。</p>\n<p>effects示例</p>\n<pre><code-editor>\n  const effects = ($: EffectsContext) =&gt; {\n  $('s1').onFieldChange(value =&gt; {\n     $('s2').value(value);\n  });\n  $('s1').onFieldChange(value =&gt; {\n    if (value !== '3') {\n      $('s3', 's4'). hide();\n    } else {\n      $('s3', 's4').show();\n    }\n  });\n}\n</code-editor></pre>\n<h2 id=\"选择器操作\">选择器操作</h2>\n<p>$函数接收一个或多个路径作为参数,返回一个 EffectsHandlers 对象，\nEffectsHandlers 对象具有以下方法，对匹配到的表单项进行操作：</p>\n<h3 id=\"状态操作函数\">状态操作函数</h3>\n<table>\n<thead>\n<tr>\n<th>方法名</th>\n<th>方法描述</th>\n<th>方法参数</th>\n<th>方法返回值</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>disable</td>\n<td>禁用表单项</td>\n<td>disabled: boolean //是否禁用，默认值true</td>\n<td>EffectsHandlers</td>\n</tr>\n<tr>\n<td>enable</td>\n<td>启用表单项</td>\n<td>enable: boolean //是否启用，默认值true</td>\n<td>EffectsHandlers</td>\n</tr>\n<tr>\n<td>editable</td>\n<td>设置匹配到的表单项是否可编辑</td>\n<td>editable: boolean //是否可编辑</td>\n<td>EffectsHandlers</td>\n</tr>\n<tr>\n<td>hide</td>\n<td>隐藏匹配到的表单项</td>\n<td>hide: boolean //是否隐藏，默认值true</td>\n<td>EffectsHandlers</td>\n</tr>\n<tr>\n<td>required</td>\n<td>设置匹配到的表单项的必填状态</td>\n<td>required: boolean // 是否必填</td>\n<td>EffectsHandlers</td>\n</tr>\n<tr>\n<td>show</td>\n<td>显示匹配到的表单项</td>\n<td>-</td>\n<td>EffectsHandlers</td>\n</tr>\n<tr>\n<td>toggle</td>\n<td>匹配到的表单项在显示与影藏之间切换</td>\n<td>-</td>\n<td>EffectsHandlers</td>\n</tr>\n</tbody></table>\n<h3 id=\"事件函数\">事件函数</h3>\n<table>\n<thead>\n<tr>\n<th>方法名</th>\n<th>方法描述</th>\n<th>方法参数</th>\n<th>方法返回值</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>isEnabled</td>\n<td>匹配到的表单项是否禁用状态</td>\n<td>-</td>\n<td>当匹配到多个表单项时，只有全部启用才返回true，反之返回false</td>\n</tr>\n<tr>\n<td>onFieldBlur</td>\n<td>当匹配的表单项失去焦点时的回调</td>\n<td>-</td>\n<td>EffectsHandlers</td>\n</tr>\n<tr>\n<td>onFieldChange</td>\n<td>当匹配的表单项的值发生变化时回调</td>\n<td>value: 新的值<br> path: 发生变化的表单项的路径</td>\n<td>EffectsHandlers</td>\n</tr>\n<tr>\n<td>onFieldCreate</td>\n<td>当表单项被创建时调用一次</td>\n<td>value: 表单项的值<br> path: 表单项路径</td>\n<td>EffectsHandlers</td>\n</tr>\n<tr>\n<td>onFieldCreateOrChange</td>\n<td>当表单项创建或者值发生变化时回调</td>\n<td>-</td>\n<td>EffectsHandlers</td>\n</tr>\n<tr>\n<td>onFieldFocus</td>\n<td>当匹配的表单项获取到焦点时回调</td>\n<td>-</td>\n<td>EffectsHandlers</td>\n</tr>\n<tr>\n<td>subscribe</td>\n<td>订阅事件</td>\n<td>event: 事件名称（详细见<a href=\"#events\">事件</a>）,callback: 回调函数/(data) =&gt; any;</td>\n<td></td>\n</tr>\n<tr>\n<td>trigger</td>\n<td>匹配到的表单项触发指定事件</td>\n<td>event: string //触发的事件名称</td>\n<td>EffectsHandlers</td>\n</tr>\n</tbody></table>\n<h3 id=\"属性值事件函数\">属性/值事件函数</h3>\n<table>\n<thead>\n<tr>\n<th>方法名</th>\n<th>方法描述</th>\n<th>方法参数</th>\n<th>方法返回值</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>setDisplayValue</td>\n<td>当匹配到的字段为非编辑模式时，设置指定的显示内容</td>\n<td>displayValue: string,number,VNode //显示的内容</td>\n<td></td>\n</tr>\n<tr>\n<td>setEnum</td>\n<td>为支持选项的表单项设置选项内容</td>\n<td>options: 选项/array</td>\n<td>EffectsHandlers</td>\n</tr>\n<tr>\n<td>setFieldProps</td>\n<td>为匹配的表单项设置属性</td>\n<td>props: 属性对象/object/{属性名称: 属性值}/object</td>\n<td>EffectsHandlers</td>\n</tr>\n<tr>\n<td>setTitle</td>\n<td>修改表单项的名称</td>\n<td>string:新的表单项名称</td>\n<td>EffectsHandlers</td>\n</tr>\n<tr>\n<td>value</td>\n<td>当不传参时表示获取匹配的表单项的值（只匹配一个表单项时直接返回该表单项的值，<br>匹配多个时返回多个表单项值组成的数组），当传递一个参数时，表示对匹配的表单项赋值</td>\n<td>value: 要设置的值</td>\n<td>当不传参时，匹配到的表单项的值</td>\n</tr>\n</tbody></table>\n<h3 id=\"匹配操作函数\">匹配操作函数</h3>\n<table>\n<thead>\n<tr>\n<th>方法名</th>\n<th>方法描述</th>\n<th>方法参数</th>\n<th>方法返回值</th>\n<th>备注</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>fields</td>\n<td>获取匹配到的所有表单项</td>\n<td>-</td>\n<td>FieldDefinition[]</td>\n<td></td>\n</tr>\n<tr>\n<td>field</td>\n<td>获取匹配到的唯一表单项，如果有多个，则返回null</td>\n<td>-</td>\n<td>FieldDefinition</td>\n<td></td>\n</tr>\n<tr>\n<td>paths</td>\n<td>匹配到的所有表单项的路径（主要用于通配符匹配）</td>\n<td>-</td>\n<td>string[]</td>\n<td></td>\n</tr>\n<tr>\n<td>appendPath</td>\n<td>在上一步的选择器上添加指定的子路径进行匹配</td>\n<td>path: string //添加的子路径</td>\n<td>EffectsHandlers</td>\n<td>例如：$('a.b').appendPath('c') 等同于 $('a.b.c')</td>\n</tr>\n<tr>\n<td>takePath</td>\n<td>将路径按层级切割后取前面n层深度</td>\n<td>n: number // 要获取的深度</td>\n<td>EffectsHandlers</td>\n<td>例如：$('a.b.c').takePath(2) 等同于 $('a.b')</td>\n</tr>\n</tbody></table>\n<h2 id=\"effectscontext-上挂载的方法\">EffectsContext 上挂载的方法</h2>\n<table>\n<thead>\n<tr>\n<th>方法名</th>\n<th>方法描述</th>\n<th>方法参数</th>\n<th>方法返回值</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>validate</td>\n<td>触发表单校验</td>\n<td>;</td>\n<td></td>\n</tr>\n<tr>\n<td>submit</td>\n<td>提交表单（主要在表单提交前触发校验，实际的提交请在自定义的回调中完成）</td>\n<td>forceValidate: 是否强制校验</td>\n<td>boolean <br> callback: 回调函数，value参数为表单当前那的值</td>\n</tr>\n<tr>\n<td>getValue</td>\n<td>获取表单当前的值</td>\n<td>-</td>\n<td></td>\n</tr>\n</tbody></table>\n<h2 id=\"支持的事件\">支持的事件</h2>\n<table>\n<thead>\n<tr>\n<th>事件名称</th>\n<th>事件说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>fieldKeydown</td>\n<td>keydown事件</td>\n</tr>\n<tr>\n<td>fieldKeyup</td>\n<td>keyup事件</td>\n</tr>\n<tr>\n<td>fieldFocus</td>\n<td>focus事件</td>\n</tr>\n<tr>\n<td>fieldBlur</td>\n<td>blur事件</td>\n</tr>\n</tbody></table>\n</div>\n</template>","import { render } from \"./index.vue?vue&type=template&id=1bc181cb\"\nconst script = {}\n\nimport exportComponent from \"/Users/wuhao/IdeaProjects/v-schema-form-next/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__"],"sourceRoot":""}