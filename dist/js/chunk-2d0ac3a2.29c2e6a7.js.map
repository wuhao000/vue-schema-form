{"version":3,"sources":["webpack:///./src/generated/doc/kuozhanguifan/index.vue","webpack:///./src/generated/doc/kuozhanguifan/index.vue?d7ad"],"names":["class","id","mode","script","__exports__","render"],"mappings":"0IACOA,MAAM,iB,EACT,gCAA+C,MAA3CC,GAAG,oBAAmB,oBAAgB,G,EAC9C,gCAAmB,MAAfA,GAAG,MAAK,MAAE,G,EACd,gCAAwF,U,6BAArF,gEAA4D,gCAAkB,YAAZ,S,6BAAY,S,KACjF,gCAA4F,U,6BAAzF,OAAG,gCAAoB,YAAd,W,6BAAc,aAAS,gCAAmB,YAAb,U,6BAAa,wC,kCACxB,2D,EAM9B,gCAA2B,MAAvBA,GAAG,UAAS,UAAM,G,EACtB,gCAAuE,U,6BAApE,uCAAmC,gCAAkB,YAAZ,S,6BAAY,iB,kCAC1B,0H,EAW9B,gCAA+B,MAA3BA,GAAG,YAAW,YAAQ,G,EAC1B,gCAAsF,U,6BAAnF,+CAA2C,gCAAkB,YAAZ,S,6BAAY,wB,kCAClC,4E,EAQ9B,gCAA+B,MAA3BA,GAAG,YAAW,YAAQ,G,EAC1B,gCAA+G,SAA5G,4GAAwG,G,+BAC7E,khB,mGApC5B,gCAqEI,MArEJ,EAqEI,CApEF,EACJ,EACA,EACA,EACA,gCAKoB,YALf,yBAKS,GALIC,KAAK,QAAM,C,8BAAC,iBAK9B,C,cACA,EACA,EACA,gCAUoB,YAVf,yBAUS,GAVIA,KAAK,QAAM,C,8BAAC,iBAU9B,C,cACA,EACA,EACA,gCAOoB,YAPf,yBAOS,GAPIA,KAAK,QAAM,C,8BAAC,iBAO9B,C,cACA,EACA,EACA,gCAgCoB,YAhCf,yBAgCS,GAhCIA,KAAK,QAAM,C,8BAAC,iBAgC9B,C,yCCpEA,MAAMC,EAAS,GAGTC,EAA2B,IAAgBD,EAAQ,CAAC,CAAC,SAASE,KAErD","file":"js/chunk-2d0ac3a2.29c2e6a7.js","sourcesContent":["<template>\n  <div class=\"markdown-body\">\n    <h1 id=\"form-schema-扩展规范\">Form Schema 扩展规范</h1>\n<h2 id=\"背景\">背景</h2>\n<p>通常使用type来描述组件类型，但是组件类型我们通常命名为数据的类型，如果一个数据类型想要使用不同的输入组件时，可以通过<code>xType</code>来指定</p>\n<p>例如：<code>boolean</code> 类型通常对应的是<code>Switch</code>组件，但是如果想要使用复选框来作为输入组件时，就可以按如下内容配置：</p>\n<pre><code-editor mode=\"json\">\n  {\n  \"type\": \"boolean\",\n  \"xType\": \"checkbox\"\n}\n</code-editor></pre>\n<h2 id=\"表单校验描述\">表单校验描述</h2>\n<p>在表单场景中，校验是必不可少的，同样，为了描述字段的校验规则，我们使用<code>rules</code>来描述字段的校验规则：</p>\n<pre><code-editor mode=\"json\">\n  {\n  \"type\": \"string\",\n  \"rules\": [\n    {\n      \"pattern\": \"\\\\d+\",\n      \"message\": \"必须是数字\"\n    }\n  ]\n}\n</code-editor></pre>\n<h2 id=\"表单组件属性描述\">表单组件属性描述</h2>\n<p>每个表单组件其实都会有自己的一套属性，有控制交互行为的，也有控制样式的，所以我们使用 <code>props</code> 来给传递给具体的表单 UI 组件：</p>\n<pre><code-editor mode=\"json\">\n  {\n  \"type\": \"select\",\n  \"props\": {\n    \"multiple\": true\n  }\n}\n</code-editor></pre>\n<h2 id=\"表单字段顺序描述\">表单字段顺序描述</h2>\n<p>因为 JSON Schema 描述对象型数据结构同样是使用对象结构来描述，但是想要映射到 UI 界面上，就会存在一个显示顺序的问题，对象 key 是无序的，所以，我们就扩展了 x-index 来控制字段顺序：</p>\n<pre><code-editor mode=\"json\">\n  {\n  \"type\": \"object\",\n  \"properties\": {\n    \"aa\": {\n      \"type\": \"string\",\n      \"x-rules\": [\n        {\n          \"pattern\": \"\\\\d+\",\n          \"message\": \"必须是数字\"\n        }\n      ],\n      \"x-props\": {\n        \"multiple\": true\n      },\n      \"x-index\": 1\n    },\n    \"bb\": {\n      \"type\": \"string\",\n      \"x-rules\": [\n        {\n          \"pattern\": \"\\\\d+\",\n          \"message\": \"必须是数字\"\n        }\n      ],\n      \"x-props\": {\n        \"multiple\": true\n      },\n      \"x-index\": 0\n    }\n  }\n}\n</code-editor></pre>\n</div>\n</template>","import { render } from \"./index.vue?vue&type=template&id=c9296cda\"\nconst script = {}\n\nimport exportComponent from \"/Users/wuhao/IdeaProjects/v-schema-form-next/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__"],"sourceRoot":""}